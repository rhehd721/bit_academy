자료구조 : 저장을 어떻게??
알고리즘 : 처리를 어떻게??

1. 최대공약수 : 유클리드 개선
	1. 임의의 두 정수 a와 b를 받는다. 
	2. b가 0? 0 이면 a가 최대공약수. 0이 아니면 
		2.1 a에 a%b를 대입
		2.2 a와 b 교환
	3. 2로 반복




2. 재귀함수 : while의 함수버전?
	복잡한걸 반복시키기 편하다
	함수안에서 자기함수를 호출하면서 특정 조건이 되면 탈출
	재귀호출의 한계(stack overflow)




3. fibonacci 수열
	1 - 3 - 5 - 8 - 13 - .... - n
	n = (n-1) + (n-2)     단, n > 1
	



4. dynamic programming = 한번푼건 다시 풀지 않는다





5. 원하는 값만 보고싶을 때
	main() {
		int a = 0x12345678;
		a = a & 0xff;

		printf("%x", a);  // bit mask

		if (a & 128) // bit check
		{
			printf("1");
		}
		else if (a & (1<<6)) 
		{
			printf("1");
		}
		else
		{
			printf("0");
		}

		a = a | 2; // bit set
		print("%x\n", a);

		// bit clear
		a = a & ~48;
		print("%x\n", a);
	}




6. 
	int a = 0xA5;

	printf("1번 문제\n");
	if (a & (1 << 6)) {
		printf("True\n");
	}
	else {
		printf("False\n");
	}

	printf("2번 문제\n");
	a = a | 10;
	printf("%x\n", a);


	printf("4번 문제\n");
	a = 0xA5;
	a = a & 0xe0;
	printf("%x\n", a);



7. 빅 엔디안(big endian) vs 리틀 엔디안(little endian)





8. 10진수 num의 우측 n비트에서 w번째 비트까지 값을 추출하여 10진수로 
	num = (num >> (n - 1) & ~(0xffffff<< w));
	num = (num >> (n - 1) & ~(~(0) << w));





9. push()넣다, pop()빼다, peek()보다, top주소








++잡상식
1. int형 실패시 보통 return -1
2. char형 실패시 보통 return NULL
3. 중위표기법과 후위표기법 (괄호 앞으로 부호를 이동하면 전위표기법 * 사진첩 참고 *)

**********************************************************************************
스터디 질문
빅 엔디안(big endian) vs 리틀 엔디안(little endian)
**********************************************************************************






