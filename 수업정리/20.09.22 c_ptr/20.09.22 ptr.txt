**************************************
sizeof = 연산의 결과를 배열의 바이트 크기 정보로 반환한다
sizeof(arr) / sizeof(자료형 int, char....)  == arr의 길이
**************************************



**************************************
함수에서 return값이 없는 경우

void 함수이름 (){
}
이런식으로 자료형에 void를 써주면 된다
**************************************



*****각종 변수**************************
전역변수는 자동으로 0으로 쓰레기값없이 생성된다
static도 자동으로 0으로 저장되며 지역변수의 성향을 가지고 있다
register cpu 내부에 존재하는 가장 빠르곳에 저장
*****************************************



**************************************
1차원 배열
int num[5];  ==> int형 5개짜리 배열 전역변수가 아닐시 꼭 초기화를 해줘야한다
**************************************



**************************************
'a' = a
"a" = a + null(\0)
즉, char a[2] == {'a','\0'} == "a"

scanf에서 문자열을 받을때 즉, %s를 사용할땐 받는대상앞에 &를 넣지 않는다
주의* scanf는 white space 즉, ' '를 종결로 생각한다
그래서 
gets(name); ==> null문자가 나올때까지 받아라
puts(name); ==> null문자가 나올때까지 출력해라
를 사용한다
name+5 == &name[5]
**************************************



**************************************
* 포인터 ptr
call by value 
call by referance

포인터는 항상 받을 값과 같은 자료형으로 만든다
포인터는 항상 초기화를 시켜준다 (0 or NULL)

ptr가 배열을 가르키고 싶다면
ex. int a[3]
    int *p
    p = &a가 아닌 p = a 로 작성한다

printf("%d %d %d %d \n", a[2], p[2], *(p + 2), *(a + 2));

//  빠른 포인터 연산 //
*p++
*(p+1)
*++p  
(*p)++
++*p  
**************************************


**************************************
strcat(a,b)

str a 와 b를 붙여준다
**************************************


**********memory*****************

stack (변경가능)
heap
global (Read only)
code

**************************************


**************************************
포인터 배열
int *p[3]
**************************************

**************************************
gets, puts
주소의 값을 넣어주고 보여주고 
**************************************









**************************************
스터디 질문
ptr 다른자료형 받아오기?
0[a] ?????
포인터......

int num = 1;
	scanf("%d", num);
	int arr[num];
**************************************














