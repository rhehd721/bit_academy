**********************************************************************************************
Func 포인터 ( 리턴타입(*ptr)(매개변수) = func )
함수의 주소를 받는다
리턴타입과, 매개변수 타입을 맞춘다
사용할땐 ptr()
ex. int (*p[4])(int,int) = {add,sub,mul,dvv}
**********************************************************************************************


**********************************************************************************************
Func 포인터 2
함수의 이름은 결국 함수가 저장된 메모리 공간을 가르키는 포인터이기에 
이 주소 값을 받아쓸 수 있다
**********************************************************************************************


**********************************************************************************************
Func 포인터 예제
void cold(void) { puts("cold"); }
void hot(void) { puts("hot"); }

void aircon(void (*p)(void)) { //함수주소값을 포인터를 통해 받는다
	p();  // 받은 포인터를 실행한다
}

main() {
	aircon(cold);  //aircon함수에 cold의 주소값을 보내준다
	aircon(hot);  //aircon함수에 hot의 주소값을 보내준다
}
**********************************************************************************************


**********************************************************************************************
Void 포인터
main() {
	void* p; //형이 없는 포인터이기 때문에 모든 형탱의 주소를 담을 수 있다

	char ch = 'A';

	p = &ch;

	printf("%c", *(char*)p);  // void 포인터 캐스팅
}
모든 void 포인터는 사용을 위한 캐스팅이 필요하다
**********************************************************************************************


**********************************************************************************************
Void 포인터 예제
void test() {
	puts("test");
}

main() {
	void* p; 
	char* a = "hello";
	p = a;
	//p로 hello 출력하기
	printf("%s\n", (char*)p);   // %s 는 주소값만 받으면 된다

	//p로 hello 출력하기
	printf("%c\n", *(char*)p);

	//p로 test 출력하기
	p = test;
	((void (*) (void))p)();   // Void 포인터 캐스팅시 변수명은 빼고 넣어준다
}
**********************************************************************************************


**********************************************************************************************
main 함수 인자전달 방법
프로젝트 -> 속성 -> 디버깅 -> 명령인수
int main(int argc, char** argv) {   // 명령인수 +1 값이 argc에 저장된다
	int dx;
	for (dx = 0; dx < argc; dx++) {
		printf("%s\n", argv[dx]);
	}
}
**********************************************************************************************



**********************************************************************************************
- 기본 지식
	스트림 : stdin(표준입력 : 키보드), stdout(표준출력 : 모니터), stderr(표준에러 : 모니터)
 
- EOF(End of File)
	파일에 끝에 도달하면 EOF가 반환된다

- 콘솔 대상의 fgetc, getchar 함수호출로 EOF를 반환하는 경우
	함수호출의 실패
	윈도우 : ctrl + Z,   리눅스 : ctrl + D 키가 입력되는 경우

- 문자열 입력 함수 : gets, fgets, scanf		예제 : 홍 길 동(enter)
	gets = 홍 길 동+NULL
	fgets = 홍 길 동+enter+NULL
	scanf = 홍+NULL // 띄어쓰기가 나오면 종결
	- 반대인 puts, fputs, printf 도 이와 동일하다 - 

- 문자열의 길이를 반환하는 함수 strlen
	#include<string.h>
	size_t strlen(const char * s);

- typedef unsigned int uint;  // 이름을 바꿔줄건데 unsigned int이걸 uint게 쓸게

- strcpy(a,b) ==> b의 내용을 a에 카피해 넣어라

- atoi("123") ==> 문자열을 int로 전환해준다
**********************************************************************************************



**********************************************************************************************
구조체 (struct)    // 서로다른 데이터 타입을 감싼다
	호출 : 구조체이름.원하는 객체

**********************************************************************************************


**********************************************************************************************
구조체 예시
struct person {
	char name[20];
	char tel[20];
	int age;
	float eye;
};

main() {

	struct person man1 = {"홍길동","010-777",22,2.0f};
	printf("%s\n", man1.name);

	struct person man2;
	man2 = man1;
	
	scanf("%d", &man1.age);
}
**********************************************************************************************


**********************************************************************************************
구조체 배열과 포인터
sturct person[4];  // 선언
sturct person[1].name; // 호출
**********************************************************************************************


**********************************************************************************************
구조체 배열과 포인터 예제
struct num {

	int fir;
	int sec;
};

//구조체 멈버 각각 던져서 합
int func1(int fir, int sec) {
	printf("%d\n", fir + sec);
	return fir + sec;
}

//구조체 변수주소 던져서 곱
int func2(struct num* p) {
	printf("%d\n", p->fir * p->sec);
	return  p->fir * p->sec;
}

//구조체 배열주소 던져서 합
int func3(struct num* c) {
	printf("%d\n", c->fir + c->sec + (c + 1)->fir + (c + 1)->sec);
	return  c->fir + c->sec + (c + 1)->fir + (c + 1)->sec;
}

main() {

	struct num a = { 1,2 }, b = { 3,4 }, c[2] = { 5,6,7,8 };

	//구조체 멈버 각각 던져서 합
	func1(a.fir, a.sec);

	//구조체 변수주소 던져서 곱
	func2(&b);
	
	//구조체 배열주소 던져서 합
	func3(c);
}
**********************************************************************************************


**********************************************************************************************
중첩된 구조체의 경우 (*)->와 (struct).의 쓰임을 잘 인지하고 써야한다
**********************************************************************************************


**********************************************************************************************
공용체(Union Type)
	구조체와 동일한 역할 하지만 정의시 struct대신 Union사용
	구조체와는 달린 구조체안 변수들은 같은 메모리를 공유한다
**********************************************************************************************


**********************************************************************************************
스터디 질문!
1. main 함수 인자전달 방법
2. 0x12345678
**********************************************************************************************


**********************************************************************************************

**********************************************************************************************



