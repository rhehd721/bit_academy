(vmware or virtualbox) 설치후 ubuntu(Linux) 설치

.find('a',3) --> 3번째부터 a 가 있는지 찾아보아라
.replace('a','b') --> a를 b로 바꾸어라
split 는 기본적으로 " "(띄어쓰기)를 기준으로 짤라준다 split('x',n) --> x를 기준으로 n개 짤라라
'x'.join(a) --> a를 붙이는데 사이사이 x 를 넣어라
.splitlines() --> 라인별로 나눠라
판독함수 .isxxxx  --> ex(upper, lower, space ... )
.zfill() --> 0으로 채우는 함수

{n:m} format -- > n번째를 넣고 m만큼 띄워라??

data-struct = 1.list, 2.stack, 3.queue, 4.tree, 5.grape

list = 인덱싱(특정하나 뽑아오기), 슬라이싱(구간?가져오기)

range(a,b,c) --> a부터b직전까지 c만큼 이동하며
list[x:y] --> x 밑으로 y 위로???

a.append(5) --> 추가해라
a.insert(3, 4) --> 3다음 4넣어라
a.reverse(); --> 뒤집어라
a.sort() --> 정렬하라
a.remove(3) --> 지워라
a.extend([6, 7, 8]) -> 뒤에 넣어주어라
append와 extend의 차이는 전자는 통째로 넣어주고 후자는 따로따로 넣어준다
a,pop() --> 마지막을 빼줘라

.sort(reverse-True) --> 역정렬
	key = str
	key = int

set = 딕셔너리랑 비슷하게 생겼지만 key와 value가 없다(약간 튜플느낌?)

1.union(s2) --> 합집합
1.intersection(s2) --> 교집합
1.difference(s2) --> 차집합


튜플 a(하나넣고),*b(나머지 다 넣고) = 신기 

li = [i for i in range(10)] --> 이것도 신기한데 --> li = [i for i in range(10) if i%2 ==1 ] --> 이것도 가능


1. d = dict(one=1, two=2) # keyword arguments
2. d = dict([('one', 1), ('two', 2)]) # tuple list
3. keys = ('one', 'two', 'three')
	values = (1, 2, 3)
	d = dict(zip(keys, values)) 

update == 수정
get == 가져오기

+= 보단 ++ 쓰는게 속도에 좋음

z = zip(seq1, seq2)
for idx, (a, b) in enumerate(z):
 print('%d: %s, %s' % (idx, a, b))

import random as r 이걸쓰면 random == r

random 과 shuffle 쳐보기




