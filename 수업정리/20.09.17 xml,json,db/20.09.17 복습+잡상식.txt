변경가능 (Mutable) vs 변경불가능(Immutable)
변경불가능(Immutable) : int, float, bool, str, tuple, unicode
변경가능 (Mutable) : list, set, dict


	얕은 복사(copy.copy) == a = b[:]
	진짜 복사하는것이 아닌 껍데기만 새로 만들고 안에 객체들은 본래 원본을 참조하는것에 그침
	껍데기의 id 값은 다르지만 결국 안에 객체들의 id 값은 같다
	

	깊은 복사(copy.deepcopy)
	얕은복사와는 달리 
	Mutable은 자신에 껍데기 안에 똑같이 복사해오고
	Inmutable은 원본에서 참조한다
	이러한 현상을 깊은 복사라고 한다

	copy가 아닌 a=b 런식으로 만들면 겉과 속 모두 id값이 같다



데코레이터@ : 클로져  ???
함수를 받아 명령을 추가한 뒤 이를 다시 함수의 형태로 반환하는 함수이다.


def __add__  == 더하기 쓰면 반응
def __radd__  == 매개변수 위치 바뀌면 반응


OPEN 예제
f = open('C:/Users/bit/Desktop/새 폴더/abc.txt','w')  # w(쓸것이다) a r(읽을것이다)
#괄호안을 사용하려면 무조건 f 를 거쳐야한다
for i in range(1,11):
    f.write('{}번째'.format(i))

f.close()

f = open('C:/Users/bit/Desktop/새 폴더/abc.txt','r')
li = f.readlines()
print(li)






오버로딩(연산자의 기능을 재정립? 하는 느낌??)과 오버라이딩도 한번 알아보자!!!!!!!!!!!!!!!!!!!!!!!!!!!

클래스에 생성자가 있지만 소멸자도 존재한다 나중에 한번 찾아보자!!!!!!!!!!!!!!!!!!!!!!!!!!!!