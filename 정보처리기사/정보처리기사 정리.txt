객체지향 분석의 방법론

	1. Rumbaugh(럼바우) 방법 : 객동기 = (객체 모델링:정보모델) (동적 모델링:상태다이어그램) (기능 모델링:자료흐름도)
	2. Booch(부치) 방법 : 미시적(Micro), 거시적(MAcro) 모두의 사용됨
	3. jacobson 방법 : Use Case 를 강조하여 사용하는 방법
	4. Coad와 Yourdon방법 : E-R 다이어그램 사용
	5. Wirfs-Brock 방법 : 분석과 설계 간의 구분이 없고, 고객 명세서를 평가해서 설계작업까지 연속 수행

자료 흐름도(DFD) = 버블차트
	프로세스와 자료저장 사이에 흐름 
	자료처리를 거쳐 변환될 때마다 새로운 이름 부여
	프로세스proces(O), 자료흐름data flow(->), 자료저장소data store(=), 단말terminator(ㅁ) 네가지로 가호표시

자료사전(DD) ------------------------------------------- 9p 참고


CASE = 소프트웨어 생명주기 전 단계의 연결, 다양한 소프트웨어 개발 모형 지원, 그래픽 지원
	발생되는 이점
	1. 개발기간 단축과 비용 절감
	2. 자동화된 기법으로 품질 향상
	3. 유지보수 간편화
	4. 생산성 향상
	5. 품질의 일관성 등..

CASE는 소프트웨어 생명주기의 어느 부분을 지원하느냐에 따라 3가지로 분류된다
	1. 상위(Upper) : 모델사이 모순, 오류검사, 자료 흐름도 작성
	2. 하위(Lower) : 코드의 작성과 테스트, 문서화과정 지원(구문 중심 편집기, 코드 생성기)
	3. 통합(Integrate) : 공통의 정보저장 장소와 통일된 사용자 인터페이스를 사용(IEF, POWERTOOLS, TAGS/IORL, TEAMWORK)

HIPO는 시스템의 분석 및 설계 문서화 시 이용되면 입력, 처리, 출력으로 구성되어있다(하향식 개발)
	HIPO Chart
	- 가시적 도표(Visual Table of Contents) : 전체적 기능과 흐름을 보옂는 계층구조
	- 총체적 도표(Overview Diagram) : 입력, 처리, 출력에 대한 정보를 제공하는 도표
	- 세부적 도표(Detail Diagram) : 총체적을 상세히 기술하는 도표

제품 소프트웨어 패키징 도구 = SW 배포시 지적 재산권의 보호 및 관리 기능과 안전유통과 배포를 보장하는 도구
	유의사항
	1. 배포되는 sw 내부 콘텐츠의 암호화 및 보안
	2. 다른 여러 콘텐츠 및 단말기 간 연동 고려
	3. 편의성을 위한 복잡성과 비효율성고려
	4. sw 종류에 적합한 암호화 알고리즘적용


유지보수(Maintenance)
	시험용이성, 이해성, 수정용이성, 이식성 고려
	수리(Corrective)
	적응(Adaptive)
	완전화(Perfective)
	예방(Preventive)

유지보수의 부작용
	1. 코딩부작용 : 코딩내용 변경으로 인한 부작용
	2. 자료부작용 : 자료나 자료구조 변경시 부작용
	3. 문서화부작용 : 자료코드 대한 변경이 설계문서나 메뉴얼에 적용되지 않을때 

외계인코드(Ailen Code) = 개발이 아주 오래전에 이루어졌거나 참고문헌 주석등이 없어 작업이 매우 어려운 코드
	철저한 문서화로 예방가능

트리의 운행법 -------------------------------------------------------------- 20~21p 참고
	1. Preorder : Root -> Left -> Right == 전위 표기법(PreFix) 
	2. Inorder : Left -> Root -> Right == 중위 표기법(InFix)
	3. Postorder : Left -> Right -> Root == 후위 표기법(PostFix)

알고리즘 = 컴퓨터의 처리속도, 사용된 언어, 컴파일러 속도에 의해 속도가 결정된다

시간복잡도 = 알고리즘의 실행시간(연산횟수)를 수치화한 것
	- 낮을수록 좋다
	- 명령어의 실행횟수 표기 = 점근 표기법
	- 점근표기법의 종류
		1. 빅오 표기법(최악일때)
		2. 세타 표기법(중간일때)
		3. 오메가 표기법(최고좋을때)
	++빅오 표기법  -------------------------------------- 24p 참고
		1. O(1)
		2. O(log2n)
		3. O(n)
		4. O(nlog2n)
		5. O(n^2)
		6. O(2^n)

병행제어(Concurrency Control) = 동시에 여러개의 트랜잭션을 병행수행할 때 데이터베이스의 일관성을 파괴하지 않도록 트랜잭션 간의 상호작용을 제어하는 것
	- 목적 - 
	1. DB의 공유 최대화
	2. 시스템 활용도를 최대화
	3. DB 일관성 유지
	4. 사용자에 대한 응답시간 최소화
	- 문제점 -
	1. 갱신분실(Lost Update) : 갱신시 발생
	2. 비완료 의존성(Uncommitted Dependency) = 임시갱신 : 두개의 작업시 충돌?
	3. 모순성(Inconsistency) = 불일치 분석 : 원치 않는 자료 이용시
	4. 연쇄 복귀(Cascading Rollback) : 연쇄작용으로 어느 하나의 문제시 다른것들도 연쇄작용

로킹(Locking) : 병행제어법중 하나로 트랜잭션들이 엑세스 전 Lock(잠금)을 요청해서 Lock이 허락되어야만 로킹 단위를 엑세스 할 수 있도록 만든 기법
	로킹 단위(Locking Granularity) = 한꺼번에 로킹할 수 있는 객체의 크기
	- DB, file, recode, fild 등은 로킹의 단위가 될 수 있다
	- 로킹단위가 크면 로크수가 작아 관리는 쉽지만 병행성 수준이 낮아지고 DB 공유도가 저하된다
	- 로킹단위가 작으면 로크수가 커져 관리가 복잡해 오버헤드가 증가하지만 병행성 수준이 높아지고 DB 공유도가 커진다

교착상태(Dead Lock) = 도로위에 차들
	발생의 필요충분조건
	1. 상호배제(Mutual Exclusion) : 한번에 한개의 프로세스만이 공유자원을 사용할 수 있어야 한다
	2. 점유와 대기(Hold and Wait) : 최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당돠어 사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야한다
	3. 비선점(Non-preemption) : 다른 프로세스에 할당된 자원은 사용이 끝날 때 까지 강제로 빼앗을 수 없다
	4. 환형대기(Circular Wait) : 공유자원을 사용하기 위해 대기하는 프로세스들이 원형으로 구성되어 있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에 있는 프로세스의 자원을 요구해야 한다
	
	예방기법Prevention(자원 낭비가 가장 심한 기법)
	1. 상호배제(Mutual Exclusion)부정 : 한번에 여러 개의 프로세스가 공유 자원을 사용 할 수 있도록 한다.
	2. 점유와 대기(Hold and Wait)부정 : 프로세스가 실행되기 전 필요한 모든 자원을 할당하여 프러세스 대기를 없애거나 자원이 점유되지 않은 상태에서만 자원을 요구
	3. 비선점(Non-preemption)부정 : 자원을 점유하고 있는 프로세스가 다른 자원을 요구할때 점유하는 자원을 반납하고 요구한 자원을 사용하기 위해 기다리게 한다
	4. 환형대기(Circular Wait)부정 : 자원을 선형 순서로 분류하여 고유 번호를 할당하고 각 프로세스는 현재 점유한 자원의 고유 번호보다 앞이나 뒤 어느 한쪽 방향으로만 자원을 요구하도록 하는 것이다
	
	회피기법(Avoidance) 주로 은행원 알고리즘에 이용되며 교착상태 발생시 적절히 피해가는 방법
	1. 은행원알고리즘(Banker's Algorithm) : E. J. Dijkstra가 제안
	2. 은행에서 모든 고객의 요구가 충족되도록 현금을 할당하는 데서 유래
	3. 교착상태가 발생하지 않으며 안전상태 교착상태가 발생되면 불안전 상태라고 한다

	발견기법(Detection) : 교착상태를 발견하는 기법으로 교착상태 발견 알고리즘과 자원 할당 그래프 등을 사용할 수 있다

	회복기법(Recovery) : 교착상태를 일으킨 프로세서 종료 또는 할당된 자원을 선점하여 프로세서나 자원 회복
	- 프로세스종료
	- 자원 선점
	


LAN(Local Area Network)근거리통신망
	1. 단일기관의 소유, 제한된 지역 내의 통신이다
	2. 광대역 전송 매체의 사용으로도 고속통신이 가능하다
	3. 경로선택없이 매체에 연결된 모든 장치로 데이터를 전송한다
	4. 네트워크에 포함된 자원을 공유한다
	5. 네트워크의 확장이나 재배치가 쉽다
	6. 전송 매체로 꼬임선, 동축 케이블, 광섬유 케이블 등을 사용한다
	7. 망의 구성 형태에 따라서 성형, 버스형, 링형, 계층형으로 분류할 수 있다.

	이런 LAN의 표준안은 IEEE 802 위원회에서 지정된 계층구조가 존재한다
	1. 물리계층 : OSI 7층 계층의 물리 계층과 동일한 기능을 제공한다.
	2. 데이터 링크 계층 : OSI 7층 계층의 데이터 링크 계층에 해당하며 매체접근과 논리 링크 제어가 존재한다
		- 매체접근제어(MAC) : 물리 네트워크에 대한 접근 제어 담당
		- 논리링크제어(LLC) : MAC에 의해 확보된 채널을 사용하여 메세지를 전송할 때 필요한 연결 관리 절차와 ACK, NAK, 순서화, 오류제어, 흐름제어담당

	IEEE 802의 주요 표준 규격 -----------------------------------------------------31p 참고



비선점 스케줄링의 개요 : FCFS, SJF, HRN, 우선순위, 기한부 알고리즘이 존재한다




