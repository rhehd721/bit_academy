- 함수 def -

1. print(locals()) ==> 함수안에 내용을 보여줌? ==> 지역변수에 있는걸 보여주는 느낌
2. print(globals()) ==> 전역변수 내용들을 보여줌?



- 기본함수와 람다함수(익명함수) -

1. def add10(a):
      return  a+10
   a = add10(20)
   print(a)

2. add10(이름을 잘 안줌) = lambda a:a+10
   print(add10(20)) 
	or
   print((lambda a:a+10)(30)) <-- 보통 이렇게 많이 씀

3. lambda 응용
   lambda x : "even" if a%2==0 else "odd"

특징 : 반드시 리턴값, if를 쓰면 else 써야한다. elif는 쓸 수 없다
	하지만 lambda x: "=" if x<0 else "0" if x==0 else '+' 이런식으로 else if를 써줄 수 있다




- map함수(문자열을 숫자로 바꿔주는 함수) -

1. 기본형태 : map(int(함수), ['1','2','3']
2. 이렇게 만들어진 map을 변수 x 에 넣고 list(x)로 다시 리스트로 변환시켜 사용
즉 map 은 뒤에 값을 함수를 통해 변환시키라는 뜻




- filter - 
사용법은 map과 같지만 map과는 달리 함수에 정의된 조건에 맞는 요소만 뽑아낸다
ex. 만약 함수 fun가 x>3이라고 하고 filter(fun, [1,2,3,4,5])를 하면 [4,5]값이 출력된다





- reduce - 

1. 예제 def func(x , y):
           return x+y
        
        li = [1,2,3,4,5]

        from functools import  reduce
        print(reduce(func, li))

	출력 : 15

특징 : 함수를 누적해서 사용하고 결과값을 내뱉는다?




- 함수안에서 전역변수를 사용하는 법 - 
global x 라고 치면 함수밖 전역변수인 x를 불러온다 만약 기존 전역변수 x가 없을시 전역변수 x 를 생성한다 
- 함수안에 함수에서 상위 함수의 변수를 사용하는 법 - 
nonlocal x 라고 치면 전역변수는 아니지만 상위 함수의 변수를 사용할 수 있다





- 클로져 - 
변수 = 함수()
실행 : 변수()
함수가 한번 실행되고 함수안에 함수가 변수에 의해 실행된다




- class - 
인스턴스 = class를 먹인 변수?


	1. 예시
	class car:
	   def __init__(self, *hd_size):  #인스턴스 생성시 자동ㅇ으로 호출되는 함수 == 초기화함수, 생성자, special method, magic method 등으로 불린다
		self.handle = hd_size[0]  #다른 객체지향과 다른 점 #인스턴스 변수

	   def run(self):
		print("달린다")

	   def fast_run(self):
		print("더빨리")
		self.run()

	bus = car(50) # handle 50
	bus.run() # 달린다
	bus.fast_run() # 더빨리 달린다
	li = [10]
	taxi = car(*li) # 리스트로 넣어줄경우 넣어줄때로 *를 붙이고 받을때도 *을 붙인다
	dic = {'a':2} # 이렇게 딕셔너리를 넣어줄 경우에는 **를 붙이고 받을때도 **를 붙인다 추가적으로 dic["a"]식으로 불러준다

	class를 만들고 난 뒤 인스턴스의 값을 줄수 있다
	bus.price = 1100

	인스턴스의 값을 제한적으로 주고싶다면
	class car:
	   __slots__ = ['number','power']
	를 해준다면 리스트에 해당하는 값은 만들수 있지만 다른 값들은 생성할 수 없다

	내부적으로 함부로 변수를 건들면 안되는 변수는
	self.__x = 100
	이런식으로 지정면 함수 내에서만 건들 수 있다

	class내 함수가 아닌 class의 변수는 모든 인스턴스가 공유한다

	__dict__ #속성이나 메소드를 찾는 순서

	''' 안에 글씨를 넣고 ''' print(__doc__)을 하면 글씨가 나옴 

	@staricmethod  #정적메소드
	def add(a,b):
	   return a+b

	@classmethod #클래스와 연관있는 메소드
	def view_cnt(cls):
           print(car.cnt)


-- 두개를 붙여주는 union --
	set.union(a,b) -- > 하나로 합쳐줌

-- from 과 import 의 뜻 -- 
	from #모듈(파일)  import #변수, 함수, 클래스



--- class 상속 ----

	class old_car:
	   pass
	class new_car(old_car):
	   pass

	print(issubclass(new_car, old_car)) # issubclass란 상속받았는지 여부를 확인하며 옆에 경우 True가 발생한다

	자식 class에 생성자 함수를 사용시 부모생성자의 명시적 호출이 필요하다?????????????????????
	super().__init__()

	부모 class에 있는 함수를 자식에도 똑같이 넣는것을 메소드오버라이딩이라고 하는데 그럴경우 똑같이 쓰는것이 아닌
	좀더 변화를 줘서 사용한다

	자식클래스가 여러부모클래스를 받을경우 가장 먼저(가장왼쪽) 상속받은 부모클래스의 특징을 우선적으로 받는다
	그래서 내가 어떤순서로 부모클래스를 받았는지 알고싶다면 print(class명.mro()) 를 하면 된다

-- 추상클래스 모듈 -- (미리 빈걸 만들어놓고 나중에 합치기 위해??? 만들어 놓는다)
from abc import *
class bone(metaclass=ABCMeta):
   @absractmethod
   def wheel(self):
	pass
   @absractmethod
   def body(self):
	pass

문제점 : 추상클래스를 상속받은 클래스는 모든 함수를 오버라이딩 해야한다




--- 추가상식 ---
def f(t):
    t=20
a=10
f(a)
print(a) # 10이 출력된다 그 이유는 int형은 변경이 불가능하기 때문이다

python 변경가능(호출) 불가능(참조) callby 알아보기***********************************************
re 표현식???

